= ファイルシステムイベント監視機能とは

日頃、
Dropboxやウイルスソフト辺りを例にする。


== 実装方式

ファイルの変更監視の実装方式は、大きく、ポーリングによる実装と、OSが提供しているAPIを使用した実装の2つの実装があります。それぞれについて見ていきましょう。

=== ポーリング

特別なAPIなどは使わず、スレッドなどを用いて、監視したいファイルやディレクトリに対して定期的に変更があったかを確認する方式です。

ポーリングのメリットとして、実行される環境にか依存せず、同じ機能が提供出来る、という事が挙げられます。後述するOSが提供しているAPIを使用した場合だと、OS毎に提供されている機能が事なり、OS間で挙動の差異が発生してしまいます。ポーリングだとそのような事がありません。

デメリットとして、変更が正確に把握することが難しい事が挙げられます。例えば、ファイルの更新があったかどうかの間に、ファイルの更新と削除が連続して行われた場合、更新の変更に気付くのが難しくなってしまいます。また、監視するファイルが数ファイルであればどうにかなるかもしれませんが、監視するファイルが複数ディレクトリに跨り数百あるような場合、更新があったかのチェックをするだけでもリソースを消費してしまい、負荷が掛ってしまう可能性があります。

このような理由により、現在は、OSが提供しているAPIを利用するのが一般的で、何らかの理由によりそれらのAPIが使用出来ないときの為のセーフティネットとしてポーリングの実装を提供、という形を取るライブラリが多いようです。もし自力でファイル変更監視を行うライブラリの実装を行うような場合は、余程特殊な事情が無い限り、後述するOSが提供するAPIを使用した実装を行うと良いでしょう。

=== OSが提供しているAPI

さて、先に説明した通り、ポーリングではファイル変更監視を正確に行うのは難しいです。しかし、昨今のOSは、OS側でファイル変更監視の為の仕組みが提供されています。一般的にAPIは、監視したファイルやディレクトリをAPIに指定->指定したファイルやディレクトリで変更があったら変更内容を取得、という事が出来るようになっています。

残念ながら、これらのAPIは標準化はされておらず、OS毎に提供されている機能に差異があります。例えば、macOSではディレクトリを再帰的に監視する為のAPIが提供されていますが、Linuxには同等の機能がありません。そのため、OSが提供しているAPIをそのまま使用した場合、提供する機能に差異が発生してまいます。

それらの差異をどう対処しているかはAPIを実装しているライブラリ毎に異なります。ライブラリについての話の前に、まずOSが提供している機能について見ていきましょう。

= OS毎の話

== Linux

まずはLinuxについて見ていきたいと思います。

=== dnotify

Linuxに初めて導入されたファイルシステムイベント監視の仕組みは、dnotifyという機能でLinux 2.4.0で導入されました。dnotifyはディレクトリ自体、もしくはその内部のファイルに変更がかかったときに、ユーザアプリケーションにその変更を通知する事を目的として提供されていました@<fn>{dnotify}。変更の通知はシグナル送信により行われます。
//footnote[dnotify][dnotifyの先頭の"d"は、"directory"の"d"らしいです。]

最初に提供されたAPIという事もあり、dnotifyには、

・個別のファイルの監視が行えない

・通知される情報が少ない(シグナル番号とファイルディスクリプタのみ)

・監視するディレクトリ毎にファイルディスクリプタをオープンする必要がある

等々の問題があったとの事です。そのため、後述するinotifyに置き換えられ、現在は使用されなくなっています。

=== inotify

前述したdnotifyの問題を解決する為に登場したのがinotify@<fn>{inotify}です。inotifyはLinux 2.6.13で導入されました。
//footnote[inotify][inode-based file event notificationsの略。]

=== fanotify

//footnote[fanotify][fscking all notificationの略。]

== *BSD

次に、BSD系OSについて見ていきましょう。

=== kqueue

BSD自体にはファイルシステム監視機能はありませんでした。しかし、子孫であるFreeBSDには、4.1からkqueue@<fn>{kqueue}という機能が追加されました。
//footnote[kqueue][Kernel Queuesの略。]

kqueueは、カーネルイベント通知の為の機能、という名目で

kqueueはその後、NetBSD、OpenBSD及びDragonFly BSDでもサポートされ、BSD系ではデファクトになりました。

== macOS

続いてmacOSについて見ていきましょう。macOSが使用しているDarwinというOSがBSDをベースにしている

=== FSEvents

" you have to open each of the directories and subdirectories and add them to a kqueue"

file system events

Time Machine

== Windows

WindowsにはUSNジャーナルというボリュームに加えられた変更の記録を維持する為の機能があります。この機能を使用して、変更があったファイル
